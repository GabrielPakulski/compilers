int func1() {}

var1 int;

x int;
class ponto1d[ int x];
class ponto1d[private int x];
class ponto2d[public int x : protected float y];
class ponto3d[public int x : private float w : protected float y];

var1 int;
var2 static int;
var3 char;
var4[5] static char;
var5[+20] bool;
var6[+ 4] string;
var7[10] int;

var marcellus;

var INT;

var8 ponto1d;


static int func1(const int x) {}
bool func2(int x, int y) {}
char func3(bool isAbc) {
	char c;
	static int x   <= "abc";
	static const int k <= 3;
	const int l <= 8;
	static i ponto;
	funcMarcellus1(.);

	//const static int[] x;
	static const int x;
	tipoMarcellus c;
	int c <= 0;
	c x;

	output marcellus, marcellus;
	x << -1;
	x << funcao() + x + 2 + f(.) %>% g(.,.); 
	x << 0;
	return 1;
	if (true + 1) then
	{
	x=1;
	};
	x = funcao() - +funcao();
	var = ?????(1+2&&true) + z(.) %>% w(arg1, arg2, ., arg4) %|% w() %>% ????last(func);

	classeMarcellus[x] = 0;

	//| TK_PR_FOR '(' expr for_list ':'
	//				expr ':' expr for_list ')' '{' cmd_block
	//for_list	: ',' expr for_list | %empty
	
	/*
	for(x + 1, case: 1 x+1 : x+1 : x+1){
		x + 1;
	}*/

	
	case 1: z=x+1;

	case 1: x = 3; X = 4; break;
	x = (y == 2) ? x : z + 1;
	x = ((y == 2) ? x : z) + 1;
	x = funcao();
	x = x != 2 ? "abc" : funcao();
	a = 7 + f() %>% g();
	a = 7 + f() %>% g() + 7;
}



string func4(int a1, int a2, int a3) {
	bool yz;
	bool ab  <= true;
	x ponto;
	y ponto;
	bool abc <= 1;
	int abcd <= 1;
	int j <= 1;
}


string fun5() {
	var4[4] = 'a';
	var5[+12] = true;
	var6j = 1;
	var7[1]$abc = 7.0;
	var8[1+1] = 3;
	val9[x[1]+2] = 7;
	val10[x[1] + y[1]] = 8;
	val10[x[z[1]] + y[1]] = 8;
	a[2e10  + -5] = 1;
	x = -3e2;
	b[(1+1) + ((x[1]) + 1 * -7)] = 15;
	var = x[4*4/4]$xyz;
	var[x[4*4/4]$xyz] = 4;
	a = x() + y();
	/*x() + y();*/
	a = var[x+y+z[1]]$campo + g[h[x*1+teste$ab]];
	teste$x = y + teste();
	teste$x = y + teste(x + t[1]);
	teste$x = y + teste(x + teste(y));
	teste[(teste(x, y, z))] = 8;
	input x+1;
	input x[1]+obj[1]$field+a$b;
	output x[1]+obj[1]$field+a$b, 7, -8;
	output 7, -8, 1+1;
	teste << 7 + 7;
	teste$abc << 7 + 7;
	teste[x[1]] << 7 + 7;
	teste[a]$b << 7 + 7;
	teste$x << -7;
	teste[x^4+x[1]]$abc >> 18/24%x[4]+teste$x;
	x = teste(1+1);
	x = teste(1,2,3);
	x = teste(.) + 1;
	x = teste(.,1) + teste(x,.);
	teste();
	teste(abc);
	teste(abc, d);
	teste(a[1], b);
	teste(a[1]$d, a$d);
	teste(a[x[1] + 2^6]$d, a$d);
	f1() %>% f2();
	f1() %>% f2() %>% f3();
	f1() %>% f2() %|% f3() %>% f1();
	teste(1) %|% teste(x);
	teste(a[x[1] + 2^6]$d, a$d) %>% f1() %>% f2(1,2,3,4);
	//x && y && z;
	//x || y;
	//x || y && z;
	a = a() && b;
	var5 = x;
	a = a() && b();
	break;
	//a() && b();
	a = a && b();
	//a || b();
	//a(x,y,z) && a(a) || a(x,y,k);
	var18 = z || y;
	var39232a = z && y || z && a;
	var7 = x && y;
	var8 = x && y && z
;	//true && x[1];
	//true;
	//false;
	//a && false && b && true;
	zy = a && false && b && true;
	a = true;
	b = false;
	//1+1;
	continue;
	break;
	c = false && true;
	c = false || a || true;
	return teste(a[x[1] + 2^6]$d, a$d) + f1() + f2(1,2,3,4);
}

string teste_operadores() {
	f() %>% g();
	/*x > y;
	x < y;
	x | y;
	x & y;
	x + y;
	x - y;
	x * y;
	x / y;
	x % y;
	x ^ y;
	x && y;
	x || y;
	x >= y;
	x <= y;
	x == y;
	x != y;
	+x;
	-x;
	!x;
	&x;
	*x;
	?x;
	#x;*/
	a = x > y;
	a = x < y;
	a = x | y;
	a = x & y;
	a = x + y;
	a = x - y;
	a = x * y;
	a = x / y;
	a = x % y;
	a = x ^ y;
	a = x && y;
	a = x || y;
	a = x >= y;
	a = x <= y;
	a = x == y;
	a = x != y;
	a = +x;
	a = -x;
	a = !x;
	a = &x;
	a = *x;
	a = ?x;
	a = #x;
	a = !!x;
	a = !!x + &y % 17 + true && ky;
}

static int abc(const int x) {
	if (3+3) then {
		a = teste(a[x[1] + 2^6]$d, a$d) %>% f1() %>% f2(1,2,3,4);

		x = 1 + f(x) %>% g();
		x = f(x) %>% g() + 2;
		x = f(x) %>% g() || h(z);

		/*x && y && z;
		x || y;
		x || y && z;*/
		a = a() && b;
	};
	if (3+3) then {};
	if (3+3) then {
		t = este(a[x[1] + 2^6]$d, a$d) %>% f1() %>% f2(1,2,3,4);
		a = a() && b;
	} else {
		//a && false && b && true;
		zy = a && false && b && true;
		a = true;
		b = false;
	};

	if (1) then {
		if (2) then {
			if (3) then {

			};
		} else {
			return 3;
		};
	};
}

pessoa x() {
	do {
		teste(a[x[1] + 2^6]$d, a$d) %>% f1() %>% f2(1,2,3,4);
		a = x && y && z;
		a = false;
	} while (x+3);

	while (x+3) do {
		b = x && y && z;
		x = false;
	};

	while (x+3) do {
		do {
			if (3+3) then {
				if (3+3) then {
					a = este(a[x[1] + 2^6]$d, a$d) %>% f1() %>% f2(1,2,3,4);
					a = x && y && z * x || y + x || y && z;
					a = a() && b;
				} else {
					w = a && false && b && true;
					zy = a && false && b && true;
					a = true;
					b = false;
				};
			};
		} while (4+4);
		return 7+ -9*2;
	};
}

abc defg(ponto w) {
	for(a=x+1 : x+1 : a=x+1) {
		x$a[0] = 12;
	};
	for(a=x+1 : x+1 : a=x+1) {
		if (3+3) then {
			este(a[x[1] + 2^6]$d, a$d) %>% f1() %>% f2(1,2,3,4);

			a = a() && b;
		} else {
			//a && false && b && true;
			zy = a && false && b && true;
			a = true;
			b = false;
		};
	};
	for(a=x+1,b=y+1,c=a+b : x+1 : a=x+1) {
		if (3+3) then {
			t = este(a[x[1] + 2^6]$d, a$d) %>% f1() %>% f2(1,2,3,4);
			
			a = a() && b;
		} else {
			//a && false && b && true;
			zy = a && false && b && true;
			a = true;
			b = false;
		};
	};
	for (a=x+1,b=y+2,c=z+3 : x+1 : a=x+1,b=y+2,c=z+3) {
		if (3+3) then {
			t = este(a[x[1] + 2^6]$d, a$d) %>% f1() %>% f2(1,2,3,4);
			a = a() && b;
		} else {
			foreach(a : x+1,x+2,x+3) {
				xyz = a && false && b && true;
				zy = a && false && b && true;
				a = true;
				b = false;
			};
		};
	};
	for(input x, output y : 2*x : x=11){};
	for(if (x==k) then {} : 2*x : x=11){};
	for(if (x==k) then {} else {} : 2*x : x=11){};
	for(if (x==k) then {} else {}, output x : 2*x : x=11){};
	for(return x+2 : 2*x : continue, x=2*2, break){};
	for(for(return x+2 : 2*x : continue, x=2*2, break){}, break : x+12 : x=1){};
	for(do {} while (x>0), while (x>0) do {} : 2*x : continue){};
	for(foreach(x : x+1){} : 1+1+true : x=1,break){};
	for(break : true : break){};
	for({},{} : true : {},continue){};
}

static ponto x(const ponto y) {
	foreach(a : x+1) {
		foreach(a : x+1) {
			foreach(a : x+1) {
			};
		};
	};
	foreach(a : x+1) {
		if (3+3) then {
			x = 7;
		};
		foreach(a : x+1) {
			foreach(a : x+1) {
				while (x+3) do {
					este(a[x[1] + 2^6]$d, a$d) %>% f1() %>% f2(1,2,3,4);
					w = x && y && z;
				};
			};
		};
	};
	{};
	{{};{};{{};};};

} 

int w() {
	switch (x+1) {
		a = x + 1;
		if (3+3) then {
			x = 7;
			k=x+x1;
			k=1+1;
			k=1.1+1;
		};
	};
	switch (x+1) {
		switch (x+2) {
			a = x + 1;
		};
		a = x + 1;
	};
}
